=================================================================================
对称加密

			加密算法					 解密算法
			  | （密钥）					|（密钥）
			  |							|	
原数据 -------------------> 密文 -------------------> 原数据

	原理: 如上图 使用密钥和加密算法对数据进行转换为密文；之后使用密钥和解密算法对密文进行逆向转换 得到原信息
	
	经典算法：DES（密钥短被弃用）、AES

	破解： 需要得到一组原文、密文  
		  将密文恢复成原文	
	
	反破解：最优加密算法的破解方式：让对方只能通过暴力破解穷举破解


=================================================================================
非对称加密 【正向：公钥加密 私钥解密 同一套加密算法】

	加密/解密

			加密算法					 加密算法
			  | （公钥）					|（密钥）
			  |							|	
原数据 -------------------> 密文 -------------------> 原数据	


原理：使用公钥对数据加密得到密文，使用私钥进行解密得到原数据 (跟溢出有关)



	栗子：
		0123456789 （通信字符范围）

	原数据： 110

	加密算法：每一个字符进行加法 
	公钥：加4	  密文：554
	密钥：加6 溢出只保留1位  密文：554 -> 1[1] 1[1] 1[0] -> 110 


场景
	（网上公开可以进行公钥发送，被截获也没用  但是C可以使用公钥来伪造数据传给B）

							  【C】		
						公钥A     公钥B	  
 公钥B													 公钥A
  【A】	<-----------------------------------------------> 【B】
 私钥A													 私钥B	

（拿对方公钥去加密 传输过去 对方用私钥去解密）

=================================================================================
非对称加密 【反向：私钥数字签名 公钥验证 同一套加密算法】
	
	（证明这个数据只来自于我  因为只有有私钥的才能造出这样的签名 而公钥解密之后可以验证这一点）


			加密算法					 加密算法
			  | （私钥）签名				|（公钥）验证
			  |							|	
原数据 -------------------> 数字签名 -------------------> 原数据	


加密 + 签名

			加密算法  					加密算法
			  |	B的公钥 					 | B的私钥
			  |							 |	
 (A)	-------------------> 密文 -------------------> 原数据
原数据 														 (B) （对比一致则证明只有我写的 这样防止伪造）
		-------------------> 签名 -------------------> 是A的签名
			  |							|
			  |	A的私钥					| A的公钥
			加密算法                   加密算法  



经典算法：RSA （加密签名）、DSA（只用于签名，设计的算法签名验证速度快）
破解： 公钥破解出私钥
反破解：最优加密算法的破解方式：让对方只能通过暴力破解穷举破解 
=================================================================================			 

密钥(key)： 加密解密
密码（password）： 身份验证

=================================================================================
Base64: 将任何二进制数据转化成64个字符组成的字符串的编码算法
		2^6 = 64 所以每6位转换出对应的字符（0~25是A~Z 26~51是a~z 52~61是0~9 62是+ 63是/） 这样形成字符串

		2进制： 011100110011000100110011
		6位一组： 011100 110011 000100 110011
		计算机是8位存数 自动补两个高位0
		科学计算器输入 00011100 00110011 00000100 00110011
		得到 28 51 4 51
		查对下照表 c z E z

		1.人眼不可读但无法得到加密效果 
		2.会使得文件大低效 
		3.但可以通过转化成字符串来进行传输  这样可以以文本的形式传图片

Base58:Base64的变种，去掉0和O  l和i +和/ （过于相似的字符,用于比特币等虚拟货币地址 防止手抄发生歧义和双击复制）

URL Encoding: 使用%进行编码

		（地址栏中的中文内容编码  +在地址栏中起到空格作用） 		
		（消除歧义 避免解析错误）
=================================================================================

常见压缩算法：  DEFLATE(zip归档的同时进行压缩的算法)
			 JPEG(对jpg压缩)
			 MP3（对音频文件压缩）
压缩也算一种编码 （编码：从一个格式转化成另一个格式，且可逆）


媒体数据的编解码：
	图片编解码 -- 将图像数据写成JPG、PNG等文件的编码格式（以及逆向）
	音频/视频编解码 -- 同上类似
		不同的压缩算法：编码后的大小不同 质量不同 都是对像素点/音频/视频的帧信息进行算法编码

=================================================================================
序列化：
	把数据对象（一般是内存中）转换成字节序列的过程

	可以序列化成json\xml等，即达到可以存储，网络传输等目的的格式即可；是线性的

序列化不算编码： 原始数据是内存（乱的）而非一种格式 		
=================================================================================
Hash:
	把任意数据转成指定大小范围的数据 

	用于摘要、数字指纹 （能够表述这个数据即可  无论这个数据多大或多小 要求有极小的碰撞率）

	经典算法：MD5（容易破解）、SHA1、SHA256等

	实际用途： 数据完整性验证（大数据流中抽取摘要 验证HashCode的一致性）
			 快速查找：hashcode() 和 hashmap

			 隐私保护 （明文存储密码 被脱库后泄漏 会被人拿去尝试其他网站登录 一般使用MD5加密等算法 
		 				而有人使用彩虹表，即对比 常用密码hash后的密文 反推出密码的暴力破解
		 				这时候可以进行加盐 对密码进行加盐（偏移或添加随机字符）再进行编码   这个偏移就是盐（每个网站不同） 
			 		  ）	

	hash不是编码：因为不可逆		 		  
=================================================================================
签名验证完整版

			加密算法  						加密算法
			  |	【B的公钥】 					  | 【B的私钥】
			  |							 	  |						【hash】
【A】	------------------->  密文    -------------------> 原数据 ------------>  原摘要  (原摘要一致则使用 原数据)  【B】
原数据 														 				
  |		-------------------> 签名摘要 ---------------------------------------->  原摘要
  |			  |				  | 			  |
  |	hash	加密算法			  |				  | 【A的公钥】
  |			  |   【A的私钥】   |           	加密算法 
  |       	  |				  |	
 摘要---------------------------
















