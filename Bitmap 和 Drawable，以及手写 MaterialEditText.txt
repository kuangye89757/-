Bitmap 和 Drawable，以及手写 MaterialEditText
=======================================================================
Bitmap:
	位图（一个图像的完整像素数据） 如一个纯蓝色的图片
		image: width:640px;height:640px;0000ff0000ff0000ff0000ff0000ff0000ff
			   0000ff0000ff0000ff0000ff0000ff0000ff0000ff0000ff0000ff0000ff
			   0000ff0000ff0000ff0000ff0000ff0000ff0000ff0000ff0000ff0000ff
			   0000ff0000ff0000ff....会把每个像素信息硬编码	


Drawable:
	一个抽象的View；只负责绘制 内部拥有各种绘制规则

	public class DrawableView extends View {
    
	    Drawable mDrawable;
	    
	    public DrawableView(Context context, @Nullable AttributeSet attrs) {
	        super(context, attrs);
	    }
	    
	    {
	        mDrawable = new ColorDrawable(Color.BLUE);
	    }

	    @Override
	    protected void onSizeChanged(int w, int h, int oldw, int oldh) {
	        super.onSizeChanged(w, h, oldw, oldh);
	        mDrawable.setBounds(100,100,getWidth(),getHeight());//设定绘制的区域
	    }

	    @Override
	    protected void onDraw(Canvas canvas) {
	        super.onDraw(canvas);
	        mDrawable.draw(canvas); //等同于一个view.draw(canvas);
	    }
	}			   

Bitmap与Drawable的转换
	由于一个代表位图，一个描述绘制；属于两个完全不同的概念，所以所谓的转换只是从各方提取形成新的形式

	bitamp -> drawable 

        Bitmap bitmap = xxx;
        Drawable mDrawable = new BitmapDrawable(getResources(),bitmap);	

    drawable -> bitmap
    	
    	Bitmap bitmap;
        if(drawable instanceof BitmapDrawable){
            BitmapDrawable bitmapDrawable = (BitmapDrawable) drawable;
            if(bitmapDrawable.getBitmap()!=null){
                return bitmapDrawable.getBitmap();
            }
        }
    
        if(drawable.getIntrinsicHeight() <= 0 || drawable.getIntrinsicWidth() <= 0){
            bitmap = Bitmap.createBitmap(1,1, Bitmap.Config.ARGB_8888);
        }else{
            bitmap = Bitmap.createBitmap(drawable.getIntrinsicWidth(),drawable.getIntrinsicHeight(), Bitmap.Config.ARGB_8888);
        }

        Canvas canvas = new Canvas(bitmap);
        drawable.setBounds(0,0,canvas.getWidth(),canvas.getHeight());
        drawable.draw(canvas);//绘制完成后，bitmap的像素信息就得到了
        return bitmap;   

自定义Drawable -- 类似于自定义View 范围为getBounds 而非getWidth()或getHeight()
	
	public class MeshDrawable extends Drawable {
	    Paint mPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
	    private static final int INTERVAL = (int) Utils.dp2px(40);
	    
	    {
	        mPaint.setColor(Color.RED);
	        mPaint.setStrokeWidth(Utils.dp2px(2));
	    }
	    
	    @Override
	    public void draw(@NonNull Canvas canvas) {
	        //绘制规则
	        for (int col = 0; col < getBounds().right; col+= INTERVAL) {
	            for (int row = 0; row < getBounds().bottom; row+=INTERVAL) {
	                //横向
	                canvas.drawLine(getBounds().left,row,getBounds().right,row,mPaint);
	                //纵向
	                canvas.drawLine(col,getBounds().top,getBounds().right,col,mPaint);
	            }
	        }
	    }

	    @Override
	    public void setAlpha(int alpha) {
	        //设置透明度
	        mPaint.setAlpha(alpha);
	    }

	    @Override
	    public int getAlpha() {
	        return mPaint.getAlpha();
	    }

	    @Override
	    public void setColorFilter(@Nullable ColorFilter colorFilter) {
	        mPaint.setColorFilter(colorFilter);
	    }

	    @Override
	    public ColorFilter getColorFilter() {
	        return mPaint.getColorFilter();
	    }

	    @Override
	    public int getOpacity() {
	        //对其下方的View的策略：
	        //@IntDef({UNKNOWN, TRANSLUCENT, TRANSPARENT, OPAQUE})
	        //PixelFormat.TRANSPARENT -- 完全透明
	        //PixelFormat.OPAQUE -- 完全不透明
	        //PixelFormat.TRANSLUCENT -- 半透明
	        return mPaint.getAlpha() == 0 ? PixelFormat.TRANSPARENT : 
	                mPaint.getAlpha() == 0xff/**255*/ ? PixelFormat.OPAQUE : 
	                PixelFormat.TRANSLUCENT;
	    }
	}        


	一般无需自定义，系统已实现比较常用的ColorDrawable、BitmapDrawable
	但是自定义Drawable可以达到代码重用效果 【工厂模式设计出不同的自定义Drawable之后，下面的自定义View使用时，只要替换drawable即可达到复用】
	public class DrawableView extends View {
    
	    Drawable mDrawable;
	    
	    public DrawableView(Context context, @Nullable AttributeSet attrs) {
	        super(context, attrs);
	    }
	    
	    {
	        mDrawable = new ColorDrawable(Color.BLUE);
	        //mDrawable = new MeshDrawable();
	        //mDrawable = new CustomDrawable();
	    }

	    @Override
	    protected void onSizeChanged(int w, int h, int oldw, int oldh) {
	        super.onSizeChanged(w, h, oldw, oldh);
	        mDrawable.setBounds(100,100,getWidth(),getHeight());//设定绘制的区域(关键)
	    }

	    @Override
	    protected void onDraw(Canvas canvas) {
	        super.onDraw(canvas);

	        //... others draw

	        //... 绘制drawable
	        mDrawable.draw(canvas); //等同于一个view.draw(canvas);
	    
			//... others draw	        
	    }
	}	

	自定义View: 需要布局中嵌套，需要测量、布局、绘制等各种操作来达到目的
	自定义Drawable：用于View内，只考虑绘制的功能
	自定义Bitmap: final类，而且没有意义自定义
=======================================================================	
/**
 * 手写MaterialEditText
 *
 * @author shijie9
 */
public class MaterialEditText extends android.support.v7.widget.AppCompatEditText {
    private static final String TAG = "MaterialEditText";
    
    /**
     * float label的文字大小
     */
    private static final float FLOAT_TEXT_SIZE = Utils.dp2px(12);

    /**
     * float label与内容的间距
     */
    private static final float FLOAT_TEXT_MARGIN = Utils.dp2px(8);

    /**
     * float label的纵向偏移(最终显示的Y位置)
     */
    private static final float TEXT_VERTICAL_OFFSET = Utils.dp2px(22);

    /**
     * float label的横向偏移(最终显示的X位置)
     */
    private static final float TEXT_HORIZONTAL_OFFSET = Utils.dp2px(5);

    /**
     * float label的动画偏移
     */
    private static final float TEXT_ANIMATION_OFFSET = Utils.dp2px(16);//动画偏移（大于文字大小）

    Paint mPaint = new Paint(Paint.ANTI_ALIAS_FLAG);

    /**
     * 是否已显示float label
     */
    boolean isFloatingLabelShown;

    ObjectAnimator animator;

    /**
     * 透明度因子 (动画控制，默认动画300ms)
     */
    float floatingLabelFactor;

    /**
     * 使用开关
     */
    boolean useFloatingLabel;
    Rect backgroundPadding = new Rect();

    public MaterialEditText(Context context, AttributeSet attrs) {
        super(context, attrs);
        init(context,attrs);
    }

    private void init(Context context, AttributeSet attrs) {

        for (int i = 0; i < attrs.getAttributeCount(); i++) {
            Log.d(TAG,"attrs : " + attrs.getAttributeName(i) + " , " + attrs.getAttributeValue(i));
        }
        //obtainStyledAttributes 获取AttributeSet 中的MaterialEditText

//        com.kuangye.drawseries.R文件下的
//           public static final int[] MaterialEditText = {
//                0x7f010103
//           };

//           public static final int useFloatingLabel=0x7f010103;
        
//           public static final int MaterialEditText_useFloatingLabel = 0; 序号
        
        
        TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.MaterialEditText);
        useFloatingLabel = typedArray.getBoolean(R.styleable.MaterialEditText_useFloatingLabel,true);
        typedArray.recycle();

        mPaint.setTextSize(FLOAT_TEXT_SIZE);
        onUseFloatingLabel();
        addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {

            }

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {
                if(!useFloatingLabel) {
                    return;
                }

                if (isFloatingLabelShown && TextUtils.isEmpty(s)) {
                    //已显示且无内容，执行消失动画
                    isFloatingLabelShown = false;
                    getAnimator().reverse();
                } else if (!isFloatingLabelShown && !TextUtils.isEmpty(s)) {
                    //未显示且有内容，执行显示动画
                    isFloatingLabelShown = true;
                    getAnimator().start();
                }
            }

            @Override
            public void afterTextChanged(Editable s) {

            }
        });
    }

    {
        Log.d(TAG,"该代码块先用构造器执行");
    }
    
    private void onUseFloatingLabel(){
        getBackground().getPadding(backgroundPadding);
        if(useFloatingLabel){
            //预留出float label的高度和间距
            setPadding(getPaddingLeft(),
                    (int) (backgroundPadding.top + FLOAT_TEXT_MARGIN + FLOAT_TEXT_SIZE),
                    getPaddingRight(),getPaddingBottom());
            
        }else{
            setPadding(getPaddingLeft(),
                    backgroundPadding.top,
                    getPaddingRight(),getPaddingBottom());
        }
    }

    public void setUseFloatingLabel(boolean useFloatingLabel) {
        if (this.useFloatingLabel != useFloatingLabel) {
            this.useFloatingLabel = useFloatingLabel;
            onUseFloatingLabel();
        }
    }

    private ObjectAnimator getAnimator() {
        if (animator == null) {
            animator = ObjectAnimator.ofFloat(MaterialEditText.this,
                    "floatingLabelFactor", 0, 1);
        }
        return animator;
    }

    public float getFloatingLabelFactor() {
        return floatingLabelFactor;
    }

    public void setFloatingLabelFactor(float floatingLabelFactor) {
        this.floatingLabelFactor = floatingLabelFactor;
        invalidate();
    }

    //每当文字变化时，会执行重绘；可以在这里进行文字内容的处理
    @Override
    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);

        //改变透明度 (0--透明 255--不透明)
        mPaint.setAlpha((int) (floatingLabelFactor * 0xff/**255*/));

        //改变偏移 
        //消失方向接近初始态:TEXT_VERTICAL_OFFSET + TEXT_ANIMATION_OFFSET 而floatingLabelFactor接近0
        //显示方向接近最终态:TEXT_VERTICAL_OFFSET 而floatingLabelFactor接近1
        float extraOffset = TEXT_ANIMATION_OFFSET * (1 - floatingLabelFactor);

        //float Text最终态的位置 Y：TEXT_VERTICAL_OFFSET
        //canvas.drawText(getHint().toString(),TEXT_HORIZONTAL_OFFSET,TEXT_VERTICAL_OFFSET,mPaint);

        //float Text初始态的位置 Y：TEXT_VERTICAL_OFFSET + TEXT_ANIMATION_OFFSET
        //canvas.drawText(getHint().toString(),TEXT_HORIZONTAL_OFFSET,TEXT_VERTICAL_OFFSET + TEXT_ANIMATION_OFFSET,mPaint);
        canvas.drawText(getHint().toString(), TEXT_HORIZONTAL_OFFSET, TEXT_VERTICAL_OFFSET + extraOffset, mPaint);
    }
}